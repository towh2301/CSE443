@model LibraryManagement.ViewModels.AdminBookViewModel

<div class="container mt-4">
    <div class="d-flex justify-content-between align-items-center mb-3">
        <h2>Manage Books</h2>
        <button class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#addBookModal">
            <i class="bi bi-plus-circle"></i> Add New Book
        </button>
    </div>

    <table class="table table-striped" id="book-table">
        <thead>
            <tr>
                <th>#</th>
                <th>Title</th>
                <th>Author</th>
                <th>Category</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var book in Model.Books)
            {
                <tr>
                    <td>@book.BookId</td>
                    <td>@book.Title</td>
                    <td>@book.Author.FirstName</td>
                    <td>@book.Category.Name</td>
                    <td>
                        <button class="btn btn-sm btn-warning edit-book-btn" 
                                data-bs-toggle="modal" 
                                data-bs-target="#editBookModal"
                                data-id="@book.BookId"
                                data-title="@book.Title"
                                data-author="@book.AuthorId"
                                data-category="@book.CategoryId">
                            <i class="bi bi-pencil-square"></i> Edit
                        </button>
                        <button class="btn btn-sm btn-danger delete-book-btn" 
                                data-id="@book.BookId">
                            <i class="bi bi-trash"></i> Delete
                        </button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
</div>

<!-- Add Book Modal -->
<div class="modal fade" id="addBookModal" tabindex="-1" aria-labelledby="addBookModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <form id="addBookForm" asp-action="AddBook" asp-controller="Admin" method="post">
                <div class="modal-header">
                    <h5 class="modal-title" id="addBookModalLabel">Add New Book</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <div class="mb-3">
                        <label for="addBookTitle" class="form-label">Title</label>
                        <input type="text" class="form-control" id="addBookTitle" name="Title" required>
                    </div>
                    <div class="mb-3">
                        <label for="addBookAuthor" class="form-label">Author</label>
                        <select class="form-select" id="addBookAuthor" name="AuthorId" required>
                            <option value="">Select Author</option>
                            @foreach (var author in Model.Authors)
                            {
                            <option value="@author.AuthorId">
                                @author.FirstName
                                @author.LastName
                            </option>
                            }
                        </select>
                    </div>
                    <div class="mb-3">
                        <label for="addBookCategory" class="form-label">Category</label>
                        <select class="form-select" id="addBookCategory" name="CategoryId" required>
                            <option value="">Select Category</option>
                            @foreach (var category in Model.Categories)
                            {
                            <option value="@category.CategoryId">@category.Name</option>
                            }
                        </select>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                    <button type="submit" class="btn btn-primary">Add Book</button>
                </div>
            </form>
        </div>
    </div>
</div>

<!-- Edit Book Modal -->
<div class="modal fade" id="editBookModal" tabindex="-1" aria-labelledby="editBookModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <form id="editBookForm" asp-action="EditBook" asp-controller="Admin" method="post">
                <input type="hidden" id="editBookId" name="Id" />
                <div class="modal-header">
                    <h5 class="modal-title" id="editBookModalLabel">Edit Book</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <div class="mb-3">
                        <label for="editBookTitle" class="form-label">Title</label>
                        <input type="text" class="form-control" id="editBookTitle" name="Title" required>
                    </div>
                    <div class="mb-3">
                        <label for="editBookAuthor" class="form-label">Author</label>
                        <select class="form-select" id="editBookAuthor" name="AuthorId" required>
                            @* Populate authors dynamically *@
                            @foreach (var author in Model.Authors)
                            {
                                <option value="@author.AuthorId">@author.FirstName @author.LastName</option>
                            }
                        </select>
                    </div>
                    <div class="mb-3">
                        <label for="editBookCategory" class="form-label">Category</label>
                        <select class="form-select" id="editBookCategory" name="CategoryId" required>
                            @* Populate categories dynamically *@
                            @foreach (var category in Model.Categories)
                            {
                                <option value="@category.CategoryId">@category.Name</option>
                            }
                        </select>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                    <button type="submit" class="btn btn-warning">Update Book</button>
                </div>
            </form>
        </div>
    </div>
</div>

<script>
    // Edit button click handler
    document.querySelectorAll('.edit-book-btn').forEach(btn => {
        btn.addEventListener('click', (e) => {
            const id = e.target.dataset.id;
            const title = e.target.dataset.title;
            const author = e.target.dataset.author;
            const category = e.target.dataset.category;

            document.getElementById('editBookId').value = id;
            document.getElementById('editBookTitle').value = title;
            document.getElementById('editBookAuthor').value = author;
            document.getElementById('editBookCategory').value = category;
        });
    });
    
    // Add book form submit handler
    document.querySelector('#addBookForm').addEventListener('submit', (e) => {
        e.preventDefault();
        const form = e.target;
        const formData = new FormData(form);

        fetch(form.action, {
            method: 'POST',
            body: formData,
            headers: {
                'X-CSRF-TOKEN': '@Html.AntiForgeryToken()'
            }
        })
        .then(response => {
            if (response.ok) {
                //location.reload('/Admin/BookView');
                // reloadBookView()
            } else {
                alert("Failed to add the book.");
            }
        });
    });
    
    // Reload the page when modal is closed
    function reloadBookView() {
        const container = document.getElementById('bookContent');
        const url = '/Admin/BookView';

        fetch(url)
            .then(response => {
                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }
                return response.text();
            })
            .catch(error => {
                console.error('Error reloading book view:', error);
            });
    }

    // Delete button click handler
    document.querySelectorAll('.delete-book-btn').forEach(btn => {
        btn.addEventListener('click', (e) => {
            const id = e.target.dataset.id;
            if (confirm("Are you sure you want to delete this book?")) {
                fetch(`/Admin/DeleteBook/${id}`, {
                    method: 'POST',
                    headers: {
                        'X-CSRF-TOKEN': '@Html.AntiForgeryToken()'
                    }
                })
                .then(response => {
                    if (response.ok) {
                        location.reload();
                    } else {
                        alert("Failed to delete the book.");
                    }
                });
            }
        });
    });
</script>
